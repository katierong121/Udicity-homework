# -*- coding: UTF-8 -*-import numpyimport timeimport urllibimport bs4import requestsfrom urllib import parsefrom urllib.parse import urlencodeimport expanddoubanfrom bs4 import BeautifulSoupimport pandas as pdimport csvfrom pandas import Seriesfrom pandas import DataFrame#task1,get each location, each category urldef getMovieUrl(category, location):    url = "https://movie.douban.com/tag/#/?sort=S&range=9,10&tags=电影,{},{}".format(category, location)    return url#testurl = getMovieUrl("悬疑", "美国")#print testurl#task2.get movie page html#url = "https://movie.douban.com/tag/#/?sort=S&range=9,10&tags=电影,科幻,美国"#html = expanddouban.getHtml(url, loadmore=True)#print(html)#task3.define film classclass Movie(object):    def __init__(self, name, rate, location, category, info_link):        self.name = name        self.rate = rate        self.location = location        self.category = category        self.info_link = info_link        #self.cover_link = cover_link    def print_movie(self):        return "{},{},{},{},{}".format(self.name, self.rate, self.location, self.category, self.info_link)#bart = Movie('肖申克的救赎', 9.6, '美国', '剧情', 'https://movie.douban.com/subject/1292052/', 'https://img3.doubanio.com/view/movie_poster_cover/lpst/public/p480747492.jpg')#bart.print_movie()#task4.get movie informationdef getMovies(category, location):    movies = []    url = getMovieUrl(category, location)    html = expanddouban.getHtml(url, loadmore=True)    soup = BeautifulSoup(html, "html.parser")    content = soup.find(id = "content").find(class_="list-wp")    for element in content.find_all("a", resursive=False):        #电影名称        Name = element.find(class_="title").string.replace(',', '')        #电影平分        Rate = element.find(class_="rate").string        #地区        Location = location        #类别        Category = category        #链接        Info_link = element.get('href')        #图片链接        Cover_link = element.find('img').get('src')        #加入到movies列表里        movies.append([Name, Rate, Location, Category, Info_link, Cover_link])    return movies#task5#get all locationsdef getLocations():    html = expanddouban.getHtml('https://movie.douban.com/tag/#/?sort=S&range=9,10&tags=电影')    soup = BeautifulSoup(html, 'html.parser')    locationList=[]    for child in soup.find(class_='tags').find(class_='category').next_sibling.next_sibling:        location = child.find(class_='tag').get_text()        if location != '全部地区':            locationList.append(location)    return locationListAll_movies = []My_category = ['喜剧', '动作', '科幻']for i in My_category:    for j in getLocations():        myList = getMovies(i, j)        All_movies += myListnumpy.savetxt('movies.csv', All_movies, delimiter=',', fmt='%s')#task6#读取csv文件，并加上列名Movie_list = pd.read_csv('movies.csv', header=None, names = ['Name', 'Rate', 'Location', 'Category', 'Info_link', 'Cover_link'], sep = ',')Temp = Movie_list.groupby(['Category', 'Location']).count()def Get_category_list(cate):    dict1 = []    dict2 = []    for index, row in Temp.iterrows():        if index[0] == cate:            dict2 = (index, row[0])            dict1.append(dict2)    return dict1List_cate_1 = sorted(Get_category_list(My_category[0]), key = lambda x:x[1],reverse=True)List_cate_2 = sorted(Get_category_list(My_category[1]), key = lambda x:x[1],reverse=True)List_cate_3 = sorted(Get_category_list(My_category[2]), key = lambda x:x[1],reverse=True)def Get_total(lists):    total_number = 0    for item, numbers in lists:        total_number += numbers    return total_numberf = open('output.txt', 'w')f.write("{}类别的电影中, 数量排名前三的地区和占此类电影总数的百分比为: ".format(List_cate_1[0][0][0]))for x, y in List_cate_1[0:3]:    f.write("{}, ".format(x[1]))    f.write("{} ".format("%.2f" % (float(y * 100) / float(Get_total(List_cate_1)))+ "%"))f.write("\n{}类别的电影中, 数量排名前三的地区和占此类电影总数的百分比为: ".format(List_cate_2[0][0][0]))for x, y in List_cate_2[0:3]:    f.write("{}, ".format(x[1]))    f.write("{} ".format("%.2f" % (float(y * 100) / float(Get_total(List_cate_2)))+ "%"))f.write("\n{}类别的电影中, 数量排名前三的地区和占此类电影总数的百分比为: ".format(List_cate_3[0][0][0]))for x, y in List_cate_3[0:3]:    f.write("{}, ".format(x[1]))    f.write("{} ".format("%.2f" % (float(y * 100) / float(Get_total(List_cate_3)))+ "%"))f.close()